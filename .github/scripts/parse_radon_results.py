"""
  Parse the reports generated by radon
"""
import re


def parse_cc_report(report_file: str):
    """
    Parse the cyclomatic complexity report file to extract grade and score.
    
    Args:
        report_file (str): Path to the report file
        
    Returns:
        tuple: (grade, score) containing the complexity grade and numerical score
    """
    try:
        with open(report_file, 'r', encoding='utf-8') as file:
            last_line = file.readlines()[-1].strip()

        # Extract grade (letter) and score (number in parentheses)
        match = re.match(r'Average complexity: ([A-F]) \(([\d.]+)\)', last_line)
        if match:
            cc_grade = match.group(1)
            cc_score = float(match.group(2))
            return cc_grade, cc_score

        raise ValueError("Invalid format in report file")

    except (FileNotFoundError, IndexError) as e:
        print(f"Error processing file {report_file}: {str(e)}")
        return None


def parse_raw_report(report_file: str):
    """
    Parse the raw report file to extract total Lines of Code (LOC).
    
    Args:
        report_file (str): Path to the report file
        
    Returns:
        int: Total number of lines of code, or None if parsing fails
    """
    try:
        with open(report_file, 'r', encoding='utf-8') as file:
            lines = file.readlines()

        # Find the Total section and extract LOC
        for i, line in enumerate(lines):
            if line.strip() == '** Total **':
                # The next line should contain LOC
                if i + 1 < len(lines):
                    loc_line = lines[i + 1].strip()
                    match = re.match(r'\s*LOC:\s*(\d+)', loc_line)
                    if match:
                        raw_loc = int(match.group(1))
                        return raw_loc

        raise ValueError("Could not find LOC information in report file")

    except (FileNotFoundError, IndexError) as e:
        print(f"Error processing file {report_file}: {str(e)}")
        return None


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Parse radon output files")
    parser.add_argument("--cc-report", type=str,
                        help="Path to the cyclomatic complexity report file")
    parser.add_argument("--raw-report", type=str,
                        help="Path to the raw report file")
    args = parser.parse_args()

    if args.cc_report:
        _, score = parse_cc_report(args.cc_report)
        print(score)

    if args.raw_report:
        loc = parse_raw_report(args.raw_report)
        print(loc)
